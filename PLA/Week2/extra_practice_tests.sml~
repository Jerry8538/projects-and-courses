use "extra_practice.sml";

(* extra_practice_tests *)

(* 1 *)
val test1 = alternate [1,2,3,4] = ~2;
			  
(* 2 *)
val test2a = min_max [1] = (1,1)
val test2b = min_max [1,3,5,~3] = (~3,5)

(* 3 *)
val test3 = cumsum [1, 3, ~3] = [1, 4, 1]

(* 4 *)				    
val test4a = greeting (SOME "Jerry8538") = "Hello there, Jerry8538!"
val test4b = greeting NONE = "Hello there, you!"

(* 5 *)
val test5 = repeat ([1,2,3], [1,0,1]) = [1,3]

(* 6 *)
val test6a = addOpt (NONE, SOME 2) = NONE
val test6b = addOpt (SOME 4, SOME 1) = SOME 5

(* 7 *)
val test7a = addAllOpt [NONE, NONE] = NONE
val test7b = addAllOpt [NONE, SOME 4, SOME 5, NONE] = SOME 9

(* 8 *)
val test8a = any [false, false] = false
val test8b = any [false, true, false] = true

(* 9 *)
val test9a = all [false, true, true] = false
val test9b = all [true, true] = true

(* 10 *)
val test10a = zip ([1,2,3], [4,6]) = [(1,4), (2,6)]
val test10b = zip ([], [1,2,3]) = []

(* 11 *)
val test11a = zipRecycle ([], [1,2,3]) = []
val test11b = zipRecycle ([1,2], [1,2,3]) = [(1,1), (2,2), (1,3)]
val test11c = zipRecycle ([1,2], [1]) = [(1,1), (2,1)]

(* 12 *)
val test12a = zipOpt ([1],[1,2]) = NONE
val test12b = zipOpt ([1,2],[1,2]) = SOME [(1,1),(2,2)]
val test12c = zipOpt ([],[]) = SOME []
					  
(* 13 *)					  
val test13a = lookup ([("a",1),("b",2),("c",3)], "d") = NONE
val test13b = lookup ([("a",1),("b",2),("c",3)], "b") = SOME 2
							     
(* 14 *)
val test14a = splitup [1,4,~6,3,~2] = ([1,4,3],[~6,~2])
